/* ============================================================ */
/*  Create a series of .grid-NxN classes
 *
 *  Example use:
 *
 *  grid-1x4
 *  grid-md-12x12
 *  grid-lg-10x10
 *
/* ============================================================ */

@mixin make-grids($infix,$min:1,$max:12) {
    @for $r from $min through $max {
        @for $c from $min through $max {
            @include make-grid($infix,$c,$r);
        }
    }
}

@mixin make-grid($infix,$c,$r) {
    .grid#{$infix}-#{$c}x#{$r} {
        -ms-grid-rows: unquote("minmax(min-content, max-content) (#{$gutter} minmax(min-content, max-content))[#{$r - 1}]");
        -ms-grid-columns: unquote("1fr (#{$gutter} 1fr)"+"[#{$c - 1}]");
        grid-template-rows: repeat($r, minmax(min-content, max-content));
        grid-template-columns: repeat($c, 1fr);
    }
}

@mixin make-grid-cells($infix,$min:1,$max:12){
	@for $i from $min through $max {
		.cell-row#{$infix}-#{$i} {
			grid-row-start: $i;
			-ms-grid-row: $i * 2 - 1;
        }

		.cell-height#{$infix}-#{$i} {
			grid-row-end: span $i;
			-ms-grid-row-span: ($i - 1) * 2 + 1;
        }

		.cell-col#{$infix}-#{$i} {
			grid-column-start: $i;
			-ms-grid-column: $i * 2 - 1;
        }

		.cell-width#{$infix}-#{$i} {
			grid-column-end: span $i;
			-ms-grid-column-span: ($i - 1) * 2 + 1;
		}
	}
}